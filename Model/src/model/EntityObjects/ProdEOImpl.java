package model.EntityObjects;

import java.math.BigDecimal;

import model.DMLOperations;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 15 12:47:42 EEST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProdEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ProdId {
            public Object get(ProdEOImpl obj) {
                return obj.getProdId();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setProdId((BigDecimal)value);
            }
        }
        ,
        ProdName {
            public Object get(ProdEOImpl obj) {
                return obj.getProdName();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setProdName((String)value);
            }
        }
        ,
        Quantity {
            public Object get(ProdEOImpl obj) {
                return obj.getQuantity();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setQuantity((BigDecimal)value);
            }
        }
        ,
        ProdCatId {
            public Object get(ProdEOImpl obj) {
                return obj.getProdCatId();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setProdCatId((BigDecimal)value);
            }
        }
        ,
        Price {
            public Object get(ProdEOImpl obj) {
                return obj.getPrice();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setPrice((BigDecimal)value);
            }
        }
        ,
        CustInvoicesProd {
            public Object get(ProdEOImpl obj) {
                return obj.getCustInvoicesProd();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CustProd {
            public Object get(ProdEOImpl obj) {
                return obj.getCustProd();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ProdCat {
            public Object get(ProdEOImpl obj) {
                return obj.getProdCat();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setProdCat((ProdCatEOImpl)value);
            }
        }
        ,
        SupInvoicesProd {
            public Object get(ProdEOImpl obj) {
                return obj.getSupInvoicesProd();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SupProd {
            public Object get(ProdEOImpl obj) {
                return obj.getSupProd();
            }

            public void put(ProdEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ProdEOImpl object);

        public abstract void put(ProdEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PRODID = AttributesEnum.ProdId.index();
    public static final int PRODNAME = AttributesEnum.ProdName.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int PRODCATID = AttributesEnum.ProdCatId.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int CUSTINVOICESPROD = AttributesEnum.CustInvoicesProd.index();
    public static final int CUSTPROD = AttributesEnum.CustProd.index();
    public static final int PRODCAT = AttributesEnum.ProdCat.index();
    public static final int SUPINVOICESPROD = AttributesEnum.SupInvoicesProd.index();
    public static final int SUPPROD = AttributesEnum.SupProd.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProdEOImpl() {
    }

    /**
     * Gets the attribute value for ProdId, using the alias name ProdId.
     * @return the value of ProdId
     */
    public BigDecimal getProdId() {
        return (BigDecimal)getAttributeInternal(PRODID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdId.
     * @param value value to set the ProdId
     */
    public void setProdId(BigDecimal value) {
        setAttributeInternal(PRODID, value);
    }

    /**
     * Gets the attribute value for ProdName, using the alias name ProdName.
     * @return the value of ProdName
     */
    public String getProdName() {
        return (String)getAttributeInternal(PRODNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdName.
     * @param value value to set the ProdName
     */
    public void setProdName(String value) {
        setAttributeInternal(PRODNAME, value);
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the value of Quantity
     */
    public BigDecimal getQuantity() {
        return (BigDecimal)getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(BigDecimal value) {
        setAttributeInternal(QUANTITY, value);
    }

    /**
     * Gets the attribute value for ProdCatId, using the alias name ProdCatId.
     * @return the value of ProdCatId
     */
    public BigDecimal getProdCatId() {
        return (BigDecimal)getAttributeInternal(PRODCATID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdCatId.
     * @param value value to set the ProdCatId
     */
    public void setProdCatId(BigDecimal value) {
        setAttributeInternal(PRODCATID, value);
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public BigDecimal getPrice() {
        return (BigDecimal)getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(BigDecimal value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getCustInvoicesProd() {
        return (RowIterator)getAttributeInternal(CUSTINVOICESPROD);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getCustProd() {
        return (RowIterator)getAttributeInternal(CUSTPROD);
    }

    /**
     * @return the associated entity ProdCatEOImpl.
     */
    public ProdCatEOImpl getProdCat() {
        return (ProdCatEOImpl)getAttributeInternal(PRODCAT);
    }

    /**
     * Sets <code>value</code> as the associated entity ProdCatEOImpl.
     */
    public void setProdCat(ProdCatEOImpl value) {
        setAttributeInternal(PRODCAT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSupInvoicesProd() {
        return (RowIterator)getAttributeInternal(SUPINVOICESPROD);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSupProd() {
        return (RowIterator)getAttributeInternal(SUPPROD);
    }

    /**
     * @param prodId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal prodId) {
        return new Key(new Object[]{prodId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EntityObjects.ProdEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        DMLOperations dml = new DMLOperations();
        int newId = dml.setNewId(getDBTransaction(), "PROD_ID", "PROD");
        setProdId(new BigDecimal(newId));
    }
}
