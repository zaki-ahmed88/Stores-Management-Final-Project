package model.EntityObjects;

import java.math.BigDecimal;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import model.DMLOperations;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 15 12:59:21 EEST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SupInvoicesEOImpl extends EntityImpl {
    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SupInvoicesId {
            public Object get(SupInvoicesEOImpl obj) {
                return obj.getSupInvoicesId();
            }

            public void put(SupInvoicesEOImpl obj, Object value) {
                obj.setSupInvoicesId((BigDecimal)value);
            }
        }
        ,
        SupInvoicesDate {
            public Object get(SupInvoicesEOImpl obj) {
                return obj.getSupInvoicesDate();
            }

            public void put(SupInvoicesEOImpl obj, Object value) {
                obj.setSupInvoicesDate((Timestamp)value);
            }
        }
        ,
        SupInvoicesMount {
            public Object get(SupInvoicesEOImpl obj) {
                return obj.getSupInvoicesMount();
            }

            public void put(SupInvoicesEOImpl obj, Object value) {
                obj.setSupInvoicesMount((BigDecimal)value);
            }
        }
        ,
        SupId {
            public Object get(SupInvoicesEOImpl obj) {
                return obj.getSupId();
            }

            public void put(SupInvoicesEOImpl obj, Object value) {
                obj.setSupId((BigDecimal)value);
            }
        }
        ,
        Sup {
            public Object get(SupInvoicesEOImpl obj) {
                return obj.getSup();
            }

            public void put(SupInvoicesEOImpl obj, Object value) {
                obj.setSup((SupEOImpl)value);
            }
        }
        ,
        SupInvoicesProd {
            public Object get(SupInvoicesEOImpl obj) {
                return obj.getSupInvoicesProd();
            }

            public void put(SupInvoicesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SupInvoicesEOImpl object);

        public abstract void put(SupInvoicesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int SUPINVOICESID = AttributesEnum.SupInvoicesId.index();
    public static final int SUPINVOICESDATE = AttributesEnum.SupInvoicesDate.index();
    public static final int SUPINVOICESMOUNT = AttributesEnum.SupInvoicesMount.index();
    public static final int SUPID = AttributesEnum.SupId.index();
    public static final int SUP = AttributesEnum.Sup.index();
    public static final int SUPINVOICESPROD = AttributesEnum.SupInvoicesProd.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SupInvoicesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EntityObjects.SupInvoicesEO");
    }

    /**
     * Gets the attribute value for SupInvoicesId, using the alias name SupInvoicesId.
     * @return the value of SupInvoicesId
     */
    public BigDecimal getSupInvoicesId() {
        return (BigDecimal)getAttributeInternal(SUPINVOICESID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupInvoicesId.
     * @param value value to set the SupInvoicesId
     */
    public void setSupInvoicesId(BigDecimal value) {
        setAttributeInternal(SUPINVOICESID, value);
    }

    /**
     * Gets the attribute value for SupInvoicesDate, using the alias name SupInvoicesDate.
     * @return the value of SupInvoicesDate
     */
    public Timestamp getSupInvoicesDate() {
        return (Timestamp)getAttributeInternal(SUPINVOICESDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupInvoicesDate.
     * @param value value to set the SupInvoicesDate
     */
    public void setSupInvoicesDate(Timestamp value) {
        setAttributeInternal(SUPINVOICESDATE, value);
    }

    /**
     * Gets the attribute value for SupInvoicesMount, using the alias name SupInvoicesMount.
     * @return the value of SupInvoicesMount
     */
    public BigDecimal getSupInvoicesMount() {
        return (BigDecimal)getAttributeInternal(SUPINVOICESMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupInvoicesMount.
     * @param value value to set the SupInvoicesMount
     */
    public void setSupInvoicesMount(BigDecimal value) {
        setAttributeInternal(SUPINVOICESMOUNT, value);
    }

    /**
     * Gets the attribute value for SupId, using the alias name SupId.
     * @return the value of SupId
     */
    public BigDecimal getSupId() {
        return (BigDecimal)getAttributeInternal(SUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupId.
     * @param value value to set the SupId
     */
    public void setSupId(BigDecimal value) {
        setAttributeInternal(SUPID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity SupEOImpl.
     */
    public SupEOImpl getSup() {
        return (SupEOImpl)getAttributeInternal(SUP);
    }

    /**
     * Sets <code>value</code> as the associated entity SupEOImpl.
     */
    public void setSup(SupEOImpl value) {
        setAttributeInternal(SUP, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSupInvoicesProd() {
        return (RowIterator)getAttributeInternal(SUPINVOICESPROD);
    }


    /**
     * @param supInvoicesId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal supInvoicesId) {
        return new Key(new Object[]{supInvoicesId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        DMLOperations dml = new DMLOperations();
        int newId = dml.setNewId(getDBTransaction(), "SUP_INVOICES_ID", "SUP_INVOICES");
        setSupInvoicesId(new BigDecimal(newId));
        
    }
    
    
    
    protected void doDML(int operation, TransactionEvent e) {
       
        
        
        if (operation == DML_INSERT) {
            int invoiceAmount = getSupInvoicesMount().intValue();
            if (invoiceAmount > 50000) {
                System.out.println("Too much value, Invoice has been canceled");
            }
            else{
                super.doDML(operation, e);
                int supplierId = getSupId().intValue();
                Statement st = getDBTransaction().createStatement(0);
                ResultSet rs;
                try {
                    rs = st.executeQuery("select BALANCE from SUP where SUP_ID = "+supplierId);
                    
                    if (rs.next()) {
                        int oldBalance = rs.getInt(1);
                        int newBalance = oldBalance + getSupInvoicesMount().intValue();
                        st.executeUpdate("update SUP set BALANCE = "+newBalance+" where SUP_ID = "+supplierId);
                    }
                    rs.close();
                    st.close();
                    
                } catch (SQLException f) {
                    System.out.println("Database Error");
                }
              
            }
        }
        else{
            super.doDML(operation, e);
        }
        
        
        
    }
    
    
    
}
