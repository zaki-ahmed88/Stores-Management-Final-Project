package model.EntityObjects;

import java.math.BigDecimal;

import model.DMLOperations;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 15 13:01:40 EEST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SupPaymentsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SupPaymentsId {
            public Object get(SupPaymentsEOImpl obj) {
                return obj.getSupPaymentsId();
            }

            public void put(SupPaymentsEOImpl obj, Object value) {
                obj.setSupPaymentsId((BigDecimal)value);
            }
        }
        ,
        SupPaymentsDate {
            public Object get(SupPaymentsEOImpl obj) {
                return obj.getSupPaymentsDate();
            }

            public void put(SupPaymentsEOImpl obj, Object value) {
                obj.setSupPaymentsDate((Timestamp)value);
            }
        }
        ,
        SupPaymentsMount {
            public Object get(SupPaymentsEOImpl obj) {
                return obj.getSupPaymentsMount();
            }

            public void put(SupPaymentsEOImpl obj, Object value) {
                obj.setSupPaymentsMount((BigDecimal)value);
            }
        }
        ,
        SupId {
            public Object get(SupPaymentsEOImpl obj) {
                return obj.getSupId();
            }

            public void put(SupPaymentsEOImpl obj, Object value) {
                obj.setSupId((BigDecimal)value);
            }
        }
        ,
        Sup {
            public Object get(SupPaymentsEOImpl obj) {
                return obj.getSup();
            }

            public void put(SupPaymentsEOImpl obj, Object value) {
                obj.setSup((SupEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SupPaymentsEOImpl object);

        public abstract void put(SupPaymentsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int SUPPAYMENTSID = AttributesEnum.SupPaymentsId.index();
    public static final int SUPPAYMENTSDATE = AttributesEnum.SupPaymentsDate.index();
    public static final int SUPPAYMENTSMOUNT = AttributesEnum.SupPaymentsMount.index();
    public static final int SUPID = AttributesEnum.SupId.index();
    public static final int SUP = AttributesEnum.Sup.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SupPaymentsEOImpl() {
    }

    /**
     * Gets the attribute value for SupPaymentsId, using the alias name SupPaymentsId.
     * @return the value of SupPaymentsId
     */
    public BigDecimal getSupPaymentsId() {
        return (BigDecimal)getAttributeInternal(SUPPAYMENTSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupPaymentsId.
     * @param value value to set the SupPaymentsId
     */
    public void setSupPaymentsId(BigDecimal value) {
        setAttributeInternal(SUPPAYMENTSID, value);
    }

    /**
     * Gets the attribute value for SupPaymentsDate, using the alias name SupPaymentsDate.
     * @return the value of SupPaymentsDate
     */
    public Timestamp getSupPaymentsDate() {
        return (Timestamp)getAttributeInternal(SUPPAYMENTSDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupPaymentsDate.
     * @param value value to set the SupPaymentsDate
     */
    public void setSupPaymentsDate(Timestamp value) {
        setAttributeInternal(SUPPAYMENTSDATE, value);
    }

    /**
     * Gets the attribute value for SupPaymentsMount, using the alias name SupPaymentsMount.
     * @return the value of SupPaymentsMount
     */
    public BigDecimal getSupPaymentsMount() {
        return (BigDecimal)getAttributeInternal(SUPPAYMENTSMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupPaymentsMount.
     * @param value value to set the SupPaymentsMount
     */
    public void setSupPaymentsMount(BigDecimal value) {
        setAttributeInternal(SUPPAYMENTSMOUNT, value);
    }

    /**
     * Gets the attribute value for SupId, using the alias name SupId.
     * @return the value of SupId
     */
    public BigDecimal getSupId() {
        return (BigDecimal)getAttributeInternal(SUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SupId.
     * @param value value to set the SupId
     */
    public void setSupId(BigDecimal value) {
        setAttributeInternal(SUPID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity SupEOImpl.
     */
    public SupEOImpl getSup() {
        return (SupEOImpl)getAttributeInternal(SUP);
    }

    /**
     * Sets <code>value</code> as the associated entity SupEOImpl.
     */
    public void setSup(SupEOImpl value) {
        setAttributeInternal(SUP, value);
    }

    /**
     * @param supPaymentsId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal supPaymentsId) {
        return new Key(new Object[]{supPaymentsId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.EntityObjects.SupPaymentsEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        DMLOperations dml = new DMLOperations();
        int newId = dml.setNewId(getDBTransaction(), "SUP_PAYMENTS_ID", "SUP_PAYMENTS");
        setSupPaymentsId(new BigDecimal(newId));
    }
}
